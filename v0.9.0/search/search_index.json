{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bgpipe: BGP reverse proxy and firewall","text":"<p>bgpipe is an open-source tool for processing messages exchanged by the Border Gateway Protocol (BGP), which is the routing protocol that makes the Internet work.</p> <p>bgpipe serves as a universal proxy sitting between BGP routers, capable of auditing, fixing, and securing BGP sessions on the fly. It is based on the BGPFix library, distributed under the MIT license, and implemented in Go, making it widely available for many platforms.</p> <p>Started in 2023 and currently in beta, bgpipe has its roots in a research project developed at the Institute of Theoretical and Applied Informatics, Polish Academy of Sciences.</p> <ul> <li> <p> Dive in!</p> <p>Read how bgpipe works and how to use it</p> <p> Introduction</p> </li> <li> <p> Free &amp; Open-Source</p> <p>Browse the source code repository</p> <p> GitHub Project</p> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Works as a transparent man-in-the-middle proxy.</li> <li>Has full, bi-directional BGP to JSON translation.</li> <li>Can filter and archive BGP sessions through an external process, eg. a Python script.</li> <li>Supports remote processing over encrypted WebSockets (HTTPS), eg. in the cloud.</li> <li>Reads and writes MRT files (BGP4MP), optionally compressed.</li> <li>Can add and drop TCP-MD5 on multi-hop BGP sessions, independently on each side.</li> <li>Has built-in BGP message filters and session limiters.</li> <li>Supports popular BGP RFCs, including Flowspec.</li> </ul>"},{"location":"#examples","title":"Examples","text":"<pre><code># connect to a BGP speaker, respond to OPEN, dump to JSON\n$ bgpipe -o speaker 1.2.3.4\n\n# JSON to BGP and back\n$ cat input.json | bgpipe -io speaker 1.2.3.4 | tee output.json\n\n# dump MRT updates to JSON\n$ bgpipe read --mrt updates.20230301.0000.bz2 -- write output.json\n\n# proxy a connection, print the conversation to stdout by default\n# 1st stage: listen on TCP *:179 for new connection\n# 2nd stage: wait for new connection and proxy it to 1.2.3.4, adding TCP-MD5\n$ bgpipe -o \\\n    -- listen :179 \\\n    -- connect --wait listen --md5 solarwinds123 1.2.3.4\n\n# a BGP speaker that streams an MRT file\n# 1st stage: active BGP speaker for AS65055\n# 2nd stage: MRT file reader, starting when the BGP session is established\n# 3rd stage: listen on TCP *:179 for new connection\n$ bgpipe \\\n  -- speaker --active --asn 65055 \\\n  -- read --mrt --wait ESTABLISHED updates.20230301.0000.bz2 \\\n  -- listen :179\n\n# a BGP sed-in-the-middle proxy rewriting ASNs in OPEN messages\n$ bgpipe \\\n  -- connect 1.2.3.4 \\\n  -- exec -LR --args sed -ure '/\"OPEN\"/{ s/65055/65001/g; s/57355/65055/g }' \\\n  -- connect 85.232.240.179\n\n# filter prefix lengths and add max-prefix session limits\n$ bgpipe --kill limit/session \\\n  -- connect 1.2.3.4 \\\n  -- limit -LR --ipv4 --min-length  8 --max-length 24 --session 1000000 \\\n  -- limit -LR --ipv6 --min-length 16 --max-length 48 --session 250000 \\\n  -- connect 5.6.7.8\n\n# stream a log of BGP session in JSON to a remote websocket\n$ bgpipe \\\n  -- connect 1.2.3.4 \\\n  -- websocket -LR --write wss://bgpfix.com/archive?user=demo \\\n  -- connect 85.232.240.179\n\n# proxy a connection dropping non-IPv4 updates\n$ bgpipe \\\n  -- connect 1.2.3.4 \\\n  -- grep -v --ipv4 \\\n  -- connect 85.232.240.179\n</code></pre>"},{"location":"intro/","title":"How bgpipe works?","text":"<p>For an introduction, watch the RIPE88 bgpipe talk or read the APNIC blog summary.</p>"}]}