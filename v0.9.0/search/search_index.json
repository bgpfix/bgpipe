{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bgpipe: a BGP firewall","text":"<p>bgpipe is an open-source tool for processing and filtering messages exchanged by the Border Gateway Protocol (BGP). BGP is the routing protocol that makes the Internet work, and as such it is considered to be critical to the global economic prosperity and security.</p> <p>bgpipe operates as a proxy sitting between BGP routers, capable of auditing, fixing, and securing BGP sessions on the fly. It is based on the BGPFix library, distributed under the MIT license, and implemented in Go, making it widely available for many platforms.</p> <p>Started in 2023, bgpipe has its roots in a research project developed at the Institute of Theoretical and Applied Informatics, Polish Academy of Sciences.</p> <ul> <li> <p> What is bgpipe?</p> <p>Understand the basics  Introduction</p> </li> <li> <p> See examples</p> <p>Get BGP pipeline ideas  Examples</p> </li> <li> <p> Downloads</p> <p>Download and install bgpipe  GitHub Releases</p> </li> <li> <p> Motivation</p> <p>Read background paper  Kirin Attack</p> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Works as a transparent man-in-the-middle proxy.</li> <li>Has full, bi-directional BGP to JSON translation.</li> <li>Can filter and archive BGP sessions through an external process, eg. a Python script.</li> <li>Supports remote processing over encrypted WebSockets (HTTPS), eg. in the cloud.</li> <li>Reads and writes MRT files (BGP4MP), optionally compressed.</li> <li>Can add and drop TCP-MD5 on multi-hop BGP sessions, independently on each side.</li> <li>Has built-in BGP message filters and session limiters.</li> <li>Supports popular BGP RFCs, including Flowspec.</li> </ul>"},{"location":"examples/","title":"bgpipe examples","text":"<p>The bgpipe command-line tool processes and filters BGP messages through a series of stages. Each stage performs a specific action, such as connecting to a BGP speaker, reading MRT files, or filtering BGP messages.</p> <p>Stages are specified in sequence, usually separated by <code>--</code>, and each stage can have its own set of options provided using flags. Global options that affect the entire bgpipe process are specified before the first stage.</p> <p>Below are practical examples to help you get started with bgpipe.</p>"},{"location":"examples/#connect-to-a-bgp-speaker","title":"Connect to a BGP speaker","text":"<p>Connect to a BGP speaker at IP address <code>1.2.3.4</code>. The command responds to the OPEN message from <code>1.2.3.4</code> (using the same ASN) and dumps the session in JSON format to stdout (the <code>-o</code> switch). It's useful for debugging and monitoring BGP sessions, allowing you to see the raw BGP messages.</p> <pre><code>bgpipe -o speaker 1.2.3.4\n</code></pre>"},{"location":"examples/#json-to-bgp-and-back","title":"JSON to BGP and back","text":"<p>Convert a JSON input file to BGP messages, send them to a BGP speaker, and capture the output back in JSON format. This example is useful for testing BGP message processing in remote speakers.</p> <pre><code>cat input.json \\\n  | bgpipe -io speaker 1.2.3.4 \\\n  | tee output.json\n</code></pre>"},{"location":"examples/#convert-mrt-files-to-json","title":"Convert MRT files to JSON","text":"<p>Read MRT updates from a compressed file and convert the updates to JSON format. This is particularly useful for analyzing historical BGP data stored in MRT files, which are often used for archiving BGP updates (e.g., see RouteViews.org).</p> <pre><code>bgpipe \\\n  -- read --mrt updates.20230301.0000.bz2 \\\n  -- write output.json\n</code></pre>"},{"location":"examples/#adding-tcp-md5","title":"Adding TCP-MD5","text":"<p>Set up a proxy that listens on TCP port 179, waits for a connection, and then proxies it to <code>1.2.3.4</code> with a popular TCP-MD5 password. The conversation is printed to stdout. This setup is useful for \"securing\" BGP sessions, ensuring that only authorized peers can establish a TCP connection. It supports multi-hop scenarios.</p> <pre><code>bgpipe -o \\\n  -- listen :179 \\\n  -- connect --wait listen --md5 solarwinds123 1.2.3.4\n</code></pre>"},{"location":"examples/#stream-mrt-files-to-bgp-routers","title":"Stream MRT files to BGP routers","text":"<p>Listen for new connections on TCP port 179. Configure an active BGP speaker for <code>AS65055</code> that streams a given MRT file when the BGP session is established. This example demonstrates how to replay historical BGP data in a live BGP session, which can be useful for testing and analysis.</p> <pre><code>bgpipe \\\n  -- speaker --active --asn 65055 \\\n  -- read --mrt --wait ESTABLISHED updates.20230301.0000.bz2 \\\n  -- listen :179\n</code></pre>"},{"location":"examples/#bgp-sed-in-the-middle-proxy","title":"BGP sed-in-the-middle proxy","text":"<p>Create a BGP proxy that connects <code>1.2.3.4</code> with 85.232.240.179, but rewrites ASNs in their OPEN messages using sed. This is useful for quickly testing and modifying BGP sessions on the fly, allowing you to simulate different network scenarios.</p> <pre><code>bgpipe \\\n  -- connect 1.2.3.4 \\\n  -- exec -LR --args sed -ure '/\"OPEN\"/{ s/65055/65001/g; s/57355/65055/g }' \\\n  -- connect 85.232.240.179\n</code></pre>"},{"location":"examples/#applying-prefix-limits","title":"Applying prefix limits","text":"<p>Filter BGP updates based on prefix lengths and enforce maximum prefix session limits for both IPv4 and IPv6 connections. This helps in managing and securing BGP sessions by limiting the number of prefixes, which can prevent resource exhaustion.</p> <pre><code>bgpipe --kill limit/session \\\n  -- connect 1.2.3.4 \\\n  -- limit -LR --ipv4 --min-length  8 --max-length 24 --session 1000000 \\\n  -- limit -LR --ipv6 --min-length 16 --max-length 48 --session 250000 \\\n  -- connect 5.6.7.8\n</code></pre>"},{"location":"examples/#archive-bgp-sessions-over-encrypted-websockets","title":"Archive BGP sessions over encrypted WebSockets","text":"<p>Stream the BGP session log in JSON format to a remote WebSocket server for real-time monitoring and archiving. This is useful for integrating BGP session data with external monitoring systems, providing a live feed of BGP activity.</p> <pre><code>bgpipe \\\n  -- connect 1.2.3.4 \\\n  -- websocket -LR --write wss://bgpfix.com/archive?user=demo \\\n  -- connect 85.232.240.179\n</code></pre>"},{"location":"examples/#grep-for-bgp-messages-in-live-sessions","title":"Grep for BGP messages in live sessions","text":"<p>Proxy a connection between two BGP peers, dropping all IPv4 updates. This is useful for environments that wish to only support IPv6 on specific sessions. The <code>grep</code> stage allows for complex filtering based on various criteria such as message type, prefix, ASN, and more.</p> <pre><code>bgpipe \\\n  -- connect 1.2.3.4 \\\n  -- grep -v --ipv4 \\\n  -- connect 85.232.240.179\n</code></pre>"},{"location":"intro/","title":"Introduction","text":""},{"location":"intro/#what-is-bgpipe","title":"What is bgpipe?","text":"<p>bgpipe is a unique open-source tool that combines BGP monitoring with active message manipulation capabilities. While traditional BGP tools like BMP or MRT are limited to passive observation, bgpipe operates as a transparent proxy between BGP speakers, allowing real-time inspection and modification of BGP messages.</p> <p>At its core, bgpipe processes BGP sessions through a series of stages, where each stage performs specific actions such as message filtering, format conversion, or security enhancement. For example, you can:</p> <ul> <li>Convert BGP messages to JSON and back for easy processing</li> <li>Add TCP-MD5 authentication to existing BGP sessions</li> <li>Filter BGP updates based on prefix lengths or AS paths</li> <li>Apply rate limits and prefix thresholds to prevent flooding attacks</li> <li>Archive BGP sessions to MRT files or remote WebSocket servers</li> <li>Process messages through external programs like Python scripts</li> </ul> <p>bgpipe operates as a \"man-in-the-middle\" proxy, but with the explicit purpose of improving BGP session security and manageability. It's particularly useful for scenarios requiring BGP message manipulation, session monitoring, or enhanced security controls.</p> <p>For practical examples of how to use bgpipe, see the examples section.</p>"},{"location":"intro/#ripe-88-talk","title":"RIPE 88 talk","text":"<p>For a video introduction, you can watch the RIPE88 bgpipe talk.</p> <p>The talk was summarized in June 2024 by Geoff Huston on the APNIC blog as follows:</p> <p>Observing and measuring the dynamic behaviour of BGP has used a small set of tools for quite some time. There\u2019s the BGP Monitoring Protocol (BMP, RFC 7854), there\u2019s the Multi-threaded Routing Toolkit (MRT) for BGP snapshot and update logs, and if you really want to head back to the earliest days of this work, there are scripts to interrogate a router via the command-line interface, CLI. All of these are observation tools, but they cannot alter the BGP messages that are being passed between BGP speakers.</p> <p>The bgpipe tool, presented by Pawe\u0142 Foremski, is an interesting tool that operates both as a BGP \u2018wire sniffer\u2019 but also allows BGP messages to be altered on the fly (Figure 1).</p> <p></p> <p>Internally, the bgpipe process can be configured to invoke supplied \u2018callback\u2019 routines when part of a BGP message matches some provided pattern, such as a particular IP prefix, update attribute patterns or such, and it can also be configured to have \u2018events\u2019 which processing elements in bgpipe can subscribe to. Simple use cases are to take a BGP session and produce a JSON-formatted log of all BGP messages or take an unencrypted BGP session and add TCP-MD5 encryption. More advanced cases can make use of an external call interface to add route validation checks using RPKI credentials.</p> <p>There has been some concern about using IPv6 prefixes to perform a BGP more specific route flooding attack and its possible to use a bgpipe module to perform various forms of prefix thresholds (per origin Autonomous System (AS) or per aggregate prefix) to detect and filter out the effects of such flooding attacks.</p> <p>It\u2019s early days in this work, but it is certainly an intriguing and novel BGP tool.</p>"}]}